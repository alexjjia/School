Homework 9

    DUE SUNDAY, DECEMBER 11 AT 5:00AM

(SORRY - THERE CAN BE NO LATE SUBMISSIONS FOR THIS ASSIGNMENT)

PART I - EQUIVALENCE RELATIONS (cont'd)
  Consider the domain of values D={1,2,3,4}, and the binary relation
      R4={ (a,b) | a/b = 2^k for some natural number k=0,1,2,...} over D.
  (i.e., a divided by b is a non-negative power of 2).

  i) List systematically the pairs of values related by this relationship,
    by showing _in order_ what values are related to 1,2,3, and 4. 
     
  ii) Show that the relation R4 is *not* an equivalence relation __using
  Theorem 2/Section 9.5 on Equivalence Relations__ in the textbook
  (p.613)/class notes.  In other words, do not check the reflexive, etc. properties
  of R4 directly, but consider instead the sets [c]_R4 = { x | c is related to x
  by R4 }

  
>>> LOOP INVARIANTS AND VERIFICATION <<<

/* Preamble:

General tactic for proving properties of programs of the form
 //  PRE
 //   >>> Pre implies 0:
 // 0:
<codeA>
 // 1:
while ( <cond> ) {
 // 2':
 //   >>> 2' implies 2
 // 2:
  <loopBody>
 // 3:
};
 // 4:
 //   >>> 4 implies POST
 //  POST

The idea is to find an assertion INV (= lines 1:, 3:), such that

a) INV /\ NOT(<cond>)    {this is line 4:} implies POST
i.e., once the loop is done you can deduce the post-condition.

b) PRE implies line 0: (which is the INV "pushed back" thru the 
   initialization process <codeA>)  i.e., codeA sets up the INV to be true

c) INV is indeed a loop invariant; 

  The way you do this is work _backwards_ from INV at the end of <loopBody>
  (line 3:), till you get a formula (line 2:), which you must then show is
  implied by INV && <cond> (line 2')

As far as "pushing back" formula f:
- for an assignment x:=e;, the previous formula is f with x replaced by e;
- for an IF c THEN S1 ELSE S2, a 'mechanical' way is the formula

   [c -> <push f back thru S1>] && [~c -> <push f back thru S2]

END OF GENERAL DISCUSSION */ 

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
II. Here is a simple program that sets j to the square of n.


//  PRE: n > 0
//  >>> show PRE implies A using arithmetic & logic
//  assertion A: 
    i:=1; 
    j:=1;
//  assertion INV must hold here
    while (i != n)  {  
      //  assertion B'  is assumed here
      //    >>> show B' implies B using arithmetic & logic
	  //  assertion B
	     i := i+1; 
	  //  assertion C
	     j := j + 2*i - 1;
	  // assertion D must hold here
    }
//  assertion E known to hold here
// >>>> show E implies POST using arithmetic & logic
//  assertion POST: j=n*n */


  (1) Find a loop invariant that will ensure that E implies POST, and
  show E ->POST

  (2) Which of the assertion(s) named (A thru E) are _exactly_ the "loop invariant"?

  (3) List the actual assertions for this proof besides each of the names A, B, B', C, D, E.

Assertion           Formula
   PRE                  n>0
   E            
   D            
   C            
   B          
   B'           
   A             

Show the 3 proofs (will be quite easy):
>>>> ( E implies POST,  done already in part (1) above)

>>> show B' implies B

>>> show PRE implies A

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

II (challenging) The following program is intended to add up the values 1
to N, into variable s (the total).  (It illustrates "loop unrolling" -- a
general technique for speeding up code by reducing the number of times the
loop test condition is evaluated.)  We suggest you use the abbreviation
sum(i,j)=0 if j<i, and i+...+j if i<=j.

k := 1;
s := 0;
m := N - (N%2) // N%2 is (N mod 2); you will have to think of what m holds 
while (k-1 != m) {
  s := s + k + (k+1);
  k := k + 2;
}

if (N != m){
    s := s  + N;
}{
    //do nothing
}

The pre-condition of the program is that N>=2 (is needed for termination at
least); the post-condition of the program is     
    s = sum(1,N)

i) Trace the program for a small value of N, and try to understand why it 
works.

ii) State a loop invariant that you could use to prove the program achieves 
the postcondition if it terminates. 

iii)* Show the formal proof of correctness, by adding blank lines between
code, and filling it in, like in the lecture notes or above.  In this case,
because there is some <code B> after the loop end, you will need to push
back POST thru <code B>, to get assertion A:, say.  And then show that INV
& (k=m), which holds after the end of the loop, implies A: [this proves
{A:} <code B> {POST}].  This is probably the hardest part to do right.

